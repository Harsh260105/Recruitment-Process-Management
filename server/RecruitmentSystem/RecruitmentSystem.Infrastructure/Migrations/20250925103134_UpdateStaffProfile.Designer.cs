// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecruitmentSystem.Infrastructure.Data;

#nullable disable

namespace RecruitmentSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250925103134_UpdateStaffProfile")]
    partial class UpdateStaffProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EducationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("FieldOfStudy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("GPA")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("GPAScale")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateEducations");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("College")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurrentCTC")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Degree")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ExpectedCTC")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("GitHubProfile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpenToRelocation")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedInProfile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NoticePeriod")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResumeFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResumeFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalExperience")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CandidateProfiles");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("YearsOfExperience")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("CandidateProfileId", "SkillId")
                        .IsUnique();

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateWorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrentJob")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateWorkExperiences");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a73a5b5-bf8f-4398-9a31-0d136fd62ac1"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(7256),
                            Description = "System Super Administrator",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("2c73a5b5-bf8f-4398-9a31-0d136fd62ac2"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(8904),
                            Description = "System Administrator",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3b73a5b5-bf8f-4398-9a31-0d136fd62ac3"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(8945),
                            Description = "Recruiter",
                            Name = "Recruiter",
                            NormalizedName = "RECRUITER"
                        },
                        new
                        {
                            Id = new Guid("4d73a5b5-bf8f-4398-9a31-0d136fd62ac4"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(8947),
                            Description = "Human Resources",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = new Guid("5e73a5b5-bf8f-4398-9a31-0d136fd62ac5"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(8948),
                            Description = "Interviewer",
                            Name = "Interviewer",
                            NormalizedName = "INTERVIEWER"
                        },
                        new
                        {
                            Id = new Guid("6f73a5b5-bf8f-4398-9a31-0d136fd62ac6"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(8949),
                            Description = "CV Reviewer",
                            Name = "Reviewer",
                            NormalizedName = "REVIEWER"
                        },
                        new
                        {
                            Id = new Guid("7a73a5b5-bf8f-4398-9a31-0d136fd62ac7"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(8951),
                            Description = "Job Candidate",
                            Name = "Candidate",
                            NormalizedName = "CANDIDATE"
                        },
                        new
                        {
                            Id = new Guid("8b73a5b5-bf8f-4398-9a31-0d136fd62ac8"),
                            CreatedAt = new DateTime(2025, 9, 25, 10, 31, 32, 888, DateTimeKind.Utc).AddTicks(8952),
                            Description = "Read-only Viewer",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        });
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Programming Languages",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Modern object-oriented programming language",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Programming Languages",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Popular enterprise programming language",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Programming Languages",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Versatile programming language for data science and web development",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Programming Languages",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Client-side scripting language for web development",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Programming Languages",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Typed superset of JavaScript",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Web Technologies",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "JavaScript library for building user interfaces",
                            Name = "React"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Web Technologies",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Platform for building mobile and desktop web applications",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Web Technologies",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "JavaScript runtime built on Chrome's V8 JavaScript engine",
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Web Technologies",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cross-platform framework for building modern web applications",
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Databases",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Microsoft's relational database management system",
                            Name = "SQL Server"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Databases",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Open-source relational database management system",
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Databases",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Advanced open-source relational database",
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Databases",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "NoSQL document database",
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Cloud & DevOps",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Amazon Web Services cloud platform",
                            Name = "AWS"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Cloud & DevOps",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Microsoft's cloud computing platform",
                            Name = "Azure"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Cloud & DevOps",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Platform for developing, shipping, and running applications",
                            Name = "Docker"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Cloud & DevOps",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Distributed version control system",
                            Name = "Git"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Soft Skills",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ability to convey information effectively",
                            Name = "Communication"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Soft Skills",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ability to work effectively with others",
                            Name = "Teamwork"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Soft Skills",
                            CreatedAt = new DateTime(2025, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ability to identify and resolve problems",
                            Name = "Problem Solving"
                        });
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.StaffProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StaffProfiles");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateEducation", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.CandidateProfile", "CandidateProfile")
                        .WithMany("CandidateEducations")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateProfile", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecruitmentSystem.Core.Entities.User", "User")
                        .WithOne("CandidateProfile")
                        .HasForeignKey("RecruitmentSystem.Core.Entities.CandidateProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateSkill", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.CandidateProfile", "CandidateProfile")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentSystem.Core.Entities.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CandidateProfile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateWorkExperience", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.CandidateProfile", "CandidateProfile")
                        .WithMany("CandidateWorkExperiences")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.StaffProfile", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.User", "User")
                        .WithOne("StaffProfile")
                        .HasForeignKey("RecruitmentSystem.Core.Entities.StaffProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.UserRole", b =>
                {
                    b.HasOne("RecruitmentSystem.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentSystem.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.CandidateProfile", b =>
                {
                    b.Navigation("CandidateEducations");

                    b.Navigation("CandidateSkills");

                    b.Navigation("CandidateWorkExperiences");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.Skill", b =>
                {
                    b.Navigation("CandidateSkills");
                });

            modelBuilder.Entity("RecruitmentSystem.Core.Entities.User", b =>
                {
                    b.Navigation("CandidateProfile");

                    b.Navigation("StaffProfile");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
